/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,21],$V2=[1,30],$V3=[1,34],$V4=[1,33],$V5=[1,32],$V6=[1,23],$V7=[1,31],$V8=[1,24],$V9=[1,26],$Va=[1,25],$Vb=[1,27],$Vc=[1,28],$Vd=[1,29],$Ve=[1,37],$Vf=[1,39],$Vg=[2,5,18,24,26,29,30,36,37,42,51,52,53,57,59,60,62,63,64],$Vh=[1,58],$Vi=[1,60],$Vj=[1,61],$Vk=[1,74],$Vl=[1,70],$Vm=[1,68],$Vn=[1,66],$Vo=[1,67],$Vp=[1,69],$Vq=[1,71],$Vr=[1,73],$Vs=[1,75],$Vt=[1,76],$Vu=[1,77],$Vv=[1,78],$Vw=[1,79],$Vx=[1,80],$Vy=[14,27,35],$Vz=[2,58],$VA=[2,5,18,24,26,29,30,36,37,42,51,52,53,57,59,60,61,62,63,64],$VB=[14,34],$VC=[1,98],$VD=[1,101],$VE=[1,109],$VF=[1,110],$VG=[1,118],$VH=[1,111],$VI=[1,112],$VJ=[1,113],$VK=[1,114],$VL=[1,115],$VM=[1,116],$VN=[1,117],$VO=[1,119],$VP=[1,120],$VQ=[1,121],$VR=[1,122],$VS=[1,123],$VT=[1,124],$VU=[14,34,35,44,48,49,58,65,68,69,70,71,72,73,74,75,76,77,78,82,84],$VV=[2,5,18,24,26,29,30,31,36,37,42,49,51,52,53,57,59,60,62,63,64,79,80,81,83,87,88,89,90,91,92,93],$VW=[14,34,35,44,48,49,51,58,65,68,69,70,71,72,73,74,75,76,77,78,82,84],$VX=[34,35],$VY=[14,34,35,44,58,77,78,82,84],$VZ=[14,34,35,44,48,49,58,65,71,72,73,74,75,76,77,78,82,84],$V_=[14,34,35,44,58,65,71,72,73,74,75,76,77,78,82,84],$V$=[1,213],$V01=[52,57,59],$V11=[1,246],$V21=[35,44];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"DEC_VAR":7,"ARREGLOS_DEC":8,"BLOQUE":9,"IF":10,"SWITCH":11,"WHILE":12,"DO_WHILE":13,"Tptcoma":14,"PRINT":15,"INCREMENTO_O_DECREMENTO":16,"ASIGNACION":17,"Tsent_trans":18,"FOR":19,"FUNCION":20,"LLAMADA_FUNCION":21,"RETORNAR":22,"CONTINUE":23,"Texecute":24,"REASIGNACION":25,"Tid":26,"Tasigna1":27,"EXP":28,"Tcontinue":29,"Treturn":30,"Tparbre":31,"VALORES":32,"LIST_P":33,"Tparcierra":34,"Tcoma":35,"Tvoid":36,"PTipo":37,"PARAMETROS_LIST":38,"DECLARACION_1":39,"FINDEC":40,"INC_AND_DEC":41,"Tfor":42,"Tcorchete1":43,"Tcorchete2":44,"Tnew":45,"LIST_EXP":46,"LIST_DOB":47,"Tmas":48,"Tmenos":49,"ID_LIST":50,"Tllave1":51,"Tllave2":52,"Tswitch":53,"CASES":54,"DEFAULT":55,"CASE":56,"Tcase":57,"Tdospuntos":58,"Tdefault":59,"Tif":60,"Telse":61,"Twhile":62,"Tdo":63,"Tcout":64,"Tmenor":65,"FIN_COUT":66,"Tendl":67,"Tpor":68,"Tdiv":69,"Tmod":70,"Tdiferente":71,"Tigual":72,"Tigualr":73,"Tmayor":74,"Tmayori":75,"Tmenori":76,"Tand":77,"Tor":78,"Tnot":79,"To":80,"Tpow":81,"Tinterrogacion":82,"Ttostring":83,"Tpointer":84,"Tlength":85,"Tc_str":86,"Ttypeof":87,"Tround":88,"Tstring":89,"Tnumero":90,"Ttrue":91,"Tfalse":92,"Tchar":93,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"Tptcoma",18:"Tsent_trans",24:"Texecute",26:"Tid",27:"Tasigna1",29:"Tcontinue",30:"Treturn",31:"Tparbre",34:"Tparcierra",35:"Tcoma",36:"Tvoid",37:"PTipo",42:"Tfor",43:"Tcorchete1",44:"Tcorchete2",45:"Tnew",48:"Tmas",49:"Tmenos",51:"Tllave1",52:"Tllave2",53:"Tswitch",57:"Tcase",58:"Tdospuntos",59:"Tdefault",60:"Tif",61:"Telse",62:"Twhile",63:"Tdo",64:"Tcout",65:"Tmenor",67:"Tendl",68:"Tpor",69:"Tdiv",70:"Tmod",71:"Tdiferente",72:"Tigual",73:"Tigualr",74:"Tmayor",75:"Tmayori",76:"Tmenori",77:"Tand",78:"Tor",79:"Tnot",80:"To",81:"Tpow",82:"Tinterrogacion",83:"Ttostring",84:"Tpointer",85:"Tlength",86:"Tc_str",87:"Ttypeof",88:"Tround",89:"Tstring",90:"Tnumero",91:"Ttrue",92:"Tfalse",93:"Tchar"},
productions_: [0,[3,2],[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,2],[6,1],[6,2],[6,1],[6,1],[6,2],[6,1],[6,1],[6,3],[6,1],[6,2],[25,4],[23,2],[22,3],[22,2],[21,3],[21,4],[33,3],[33,1],[20,5],[20,5],[32,1],[32,2],[38,4],[38,2],[7,3],[16,2],[19,8],[17,7],[17,10],[8,11],[8,16],[8,9],[8,11],[8,7],[47,5],[47,3],[46,3],[46,1],[40,1],[40,3],[41,2],[41,2],[39,1],[50,3],[50,1],[9,3],[9,2],[11,7],[11,8],[54,2],[54,1],[56,4],[56,3],[55,3],[55,2],[10,5],[10,7],[10,7],[12,5],[13,6],[15,5],[66,1],[66,4],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,2],[28,4],[28,2],[28,6],[28,5],[28,3],[28,4],[28,5],[28,1],[28,5],[28,4],[28,4],[28,4],[28,7],[28,4],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=new AST_Node("RAIZ","RAIZ",this.$first_line,_$[$0-1].last_column);this.$.addChilds($$[$0-1]);return this.$
break;
case 2:
return new AST_Node("ERROR","ERROR",this._$.first_line,_$[$0-1].last_column); L_Error.getInstance().insertar(new N_Error("Sintactico", "Error en la gramatica "+ $$[$0-1]+ " ", this._$.first_line, _$[$0-1].last_column));
break;
case 3:

this.$= new AST_Node("SENTENCIAS","SENTENCIAS",this._$.first_line,_$[$0].last_column); this.$.addChilds($$[$0-1],$$[$0])

break;
case 4:
this.$= new AST_Node("SENTENCIAS","SENTENCIAS",this._$.first_line,_$[$0].last_column);
                      this.$.addChilds($$[$0]);
break;
case 5:
this.$= new AST_Node("SENTENCIA","SENTENCIA",this._$.first_line,_$[$0].last_column); this.$.addChilds($$[$0]);
break;
case 6:
this.$ = new AST_Node("SENTENCIA_ARR","SENTENCIA_ARR",this._$.first_line,_$[$0].last_column); this.$.addChilds($$[$0]);
break;
case 7: case 8: case 12:
this.$=$$[$0]
break;
case 9:
this.$= new AST_Node("SENTENCIA_SWITCH","SENTENCIA_SWITCH",this._$.first_line,_$[$0].last_column); this.$.addChilds($$[$0]);
break;
case 10:
this.$= new AST_Node("SENTENCIA_WHILE","SENTENCIA_WHILE",this._$.first_line,_$[$0].last_column);this.$.addChilds($$[$0]);
break;
case 11:
this.$=new AST_Node("SENTENCIA_DO_WHILE","SENTENCIA_DO_WHILE",this._$.first_line,_$[$0].last_column);this.$.addChilds($$[$0-1],new AST_Node(";",";",this._$.first_line,_$[$0].last_column));
break;
case 13:
this.$=new AST_Node("SENTENCIA_IAD","SENTENCIA_IAD",this._$.first_line,_$[$0-1].last_column);this.$.addChilds($$[$0-1],new AST_Node(";",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 14:
this.$=new AST_Node("SENTENCIA_ASIG", "SENTENCIA_ASIG", this._$.first_line,_$[$0].last_column); this.$.addChilds($$[$0]);
break;
case 15:
this.$=new AST_Node("SENTENCIA_TR","SENTENCIA_TR",this._$.first_line,_$[$0-1].last_column); this.$.addChilds(new AST_Node("Tsent_trans",$$[$0-1],this._$.first_line,_$[$0-1].last_column));
break;
case 16:
 this.$=new AST_Node("SENTENCIA_FOR","SENTENCIA_FOR",this._$.first_line,_$[$0].last_column); this.$.addChilds($$[$0]); 
break;
case 17:
this.$=new AST_Node("SENTENCIA_FUNCION","SENTENCIA_FUNCION",this._$.first_line,_$[$0].last_column); this.$.addChilds($$[$0]); 
break;
case 18:
this.$=new AST_Node("SENTENCIA_LLAMADA","SENTENCIA_LLAMADA",this._$.first_line,_$[$0-1].last_column); this.$.addChilds($$[$0-1],new AST_Node(";",";",this._$.first_line,_$[$0].last_column));
break;
case 19:
this.$=new AST_Node("SENTENCIA_RETORNAR","SENTENCIA_RETORNAR",this._$.first_line,_$[$0].last_column); this.$.addChilds($$[$0]);
break;
case 20:
 this.$=new AST_Node("SENTENCIA_CONTINUE","SENTENCIA_CONTINUE",this._$.first_line,_$[$0].last_column); this.$.addChilds($$[$0]);
break;
case 21:
this.$=new AST_Node("SENTENCIA_EXECUTE","SENTENCIA_EXECUTE",this._$.first_line,_$[$0-2].last_column); this.$.addChilds(new AST_Node("Texecute",$$[$0-2],this._$.first_line,_$[$0-2].last_column),$$[$0-1],new AST_Node(";",";",this._$.first_line,_$[$0].last_column));
break;
case 22:
this.$=new AST_Node("SENTENCIA_REASIG","SENTENCIA_REASIG",this._$.first_line,_$[$0].last_column); this.$.addChilds($$[$0]);
break;
case 23:
this.$=new AST_Node("ERROR","ERROR",this._$.first_line,_$[$0-1].last_column); L_Error.getInstance().insertar(new N_Error("Sintactico", "Error en la gramatica :" + $$[$0-1] + " ", this._$.first_line, _$[$0-1].last_column));
break;
case 24:
this.$=new AST_Node("REASIGNACION","REASIGNACION",this._$.first_line,_$[$0-1].last_column); this.$.addChilds(new AST_Node("id",$$[$0-3],this._$.first_line,_$[$0-3].last_column),new AST_Node("=",$$[$0-2],this._$.first_line,_$[$0-2].last_column),$$[$0-1],new AST_Node(";",";",this._$.first_line,_$[$0].last_column));
break;
case 25:
this.$=new AST_Node("CONTINUE","CONTINUE",this._$.first_line,_$[$0-1].last_column); this.$.addChilds(new AST_Node("Tcontinue",$$[$0-1],this._$.first_line,_$[$0-1].last_column),new AST_Node(";",";",this._$.first_line,_$[$0].last_column));
break;
case 26:
this.$=new AST_Node("RETORNAR","RETORNAR",this._$.first_line,_$[$0-2].last_column); this.$.addChilds(new AST_Node("Treturn",$$[$0-2],this._$.first_line,_$[$0-2].last_column),$$[$0-1],new AST_Node(";",";",this._$.first_line,_$[$0].last_column));
break;
case 27:
this.$=new AST_Node("RETORNAR","RETORNAR",this._$.first_line,_$[$0-1].last_column); this.$.addChilds(new AST_Node("Treturn",$$[$0-1],this._$.first_line,_$[$0-1].last_column),new AST_Node(";",";",this._$.first_line,_$[$0].last_column));
break;
case 28:
this.$=new AST_Node("LLAMADA_FUNCION","LLAMADA_FUNCION",this._$.first_line,_$[$0-2].last_column); this.$.addChilds(new AST_Node("id",$$[$0-2],this._$.first_line,_$[$0-2].last_column),new AST_Node("(","(",this._$.first_line,_$[$0-1].last_column),$$[$0]);
break;
case 29:
this.$=new AST_Node("LLAMADA_FUNCION","LLAMADA_FUNCION",this._$.first_line,_$[$0-3].last_column); this.$.addChilds(new AST_Node("id",$$[$0-3],this._$.first_line,_$[$0-3].last_column),new AST_Node("(","(",this._$.first_line,_$[$0-2].last_column),$$[$0-1],new AST_Node(")",")",this._$.first_line,_$[$0].last_column));
break;
case 30:
this.$ = new AST_Node("LIST_P","LIST_P",this._$.first_line,_$[$0-1].last_column); this.$.addChilds($$[$0-2],new AST_Node(",",$$[$0-1],this._$.first_line,_$[$0-1].last_column),$$[$0]);
break;
case 31:
this.$=new AST_Node("LIST_P","LIST_P",this._$.first_line,_$[$0].last_column); this.$.addChilds($$[$0]);
break;
case 32:
this.$=new AST_Node("FUNCION","FUNCION",this._$.first_line,_$[$0-4].last_column); this.$.addChilds(new AST_Node("Tvoid",$$[$0-4],this._$.first_line,_$[$0-4].last_column),new AST_Node("id",$$[$0-3],this._$.first_line,_$[$0-3].last_column),new AST_Node("(","(",this._$.first_line,_$[$0-2].last_column), $$[$0-1], $$[$0]);
break;
case 33:
this.$=new AST_Node("FUNCION","FUNCION",this._$.first_line,_$[$0-4].last_column); this.$.addChilds(new AST_Node("PTipo",$$[$0-4],this._$.first_line,_$[$0-4].last_column),new AST_Node("id",$$[$0-3],this._$.first_line,_$[$0-3].last_column),new AST_Node("(","(",this._$.first_line,_$[$0-2].last_column), $$[$0-1], $$[$0]);
break;
case 34:
this.$=new AST_Node("VALORES","VALORES",this._$.first_line,_$[$0].last_column); this.$.addChilds(new AST_Node(")",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 35:
this.$= new AST_Node("VALORES","VALORES",this._$.first_line,_$[$0-1].last_column); this.$.addChilds($$[$0-1],new AST_Node(")",")",this._$.first_line,_$[$0].last_column));
break;
case 36:
this.$ = new AST_Node("PARAMETROS_LIST","PARAMETROS_LIST",this._$.first_line,_$[$0-3].last_column); this.$.addChilds($$[$0-3], new AST_Node(",",",",this._$.first_line,_$[$0-2].last_column), new AST_Node("PTipo",$$[$0-1],this._$.first_line,_$[$0-1].last_column), new AST_Node("id",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 37:
this.$=new AST_Node("PARAMETROS_LIST","PARAMETROS_LIST",this._$.first_line,_$[$0-1].last_column); this.$.addChilds(new AST_Node("PTipo",$$[$0-1],this._$.first_line,_$[$0-1].last_column),new AST_Node("id",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 38:
this.$= new AST_Node("DEC_VAR","DEC_VAR",this._$.first_line,_$[$0-1].last_column);this.$.addChilds(new AST_Node("tipo",$$[$0-2],this._$.first_line,_$[$0-2].last_column),$$[$0-1], $$[$0]);
break;
case 39:
this.$=new AST_Node("INCREMENTO_O_DECREMENTO","INCREMENTO_O_DECREMENTO",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("id",$$[$0-1],this._$.first_line,_$[$0-1].last_column),$$[$0]);
break;
case 40:
this.$=new AST_Node("FOR","FOR",this._$.first_line,_$[$0-7].last_column); this.$.addChilds(new AST_Node("Tfor",$$[$0-7],this._$.first_line,_$[$0-7].last_column),new AST_Node("(","(",this._$.first_line,_$[$0-6].last_column),$$[$0-5],$$[$0-4],new AST_Node(";",";",this._$.first_line,_$[$0-4].last_column), $$[$0-2],new AST_Node(")",")",this._$.first_line,_$[$0-1].last_column),$$[$0]) 
break;
case 41:
this.$=new AST_Node("ASIGNACION","ASIGNACION_T1",this._$.first_line,_$[$0-2].last_column); this.$.addChilds(new AST_Node("id",$$[$0-6],this._$.first_line,_$[$0-6].last_column),new AST_Node("[",$$[$0-5],this._$.first_line,_$[$0-5].first_column),$$[$0-4],new AST_Node("]",$$[$0-3],this._$.first_line,_$[$0-3].first_column),new AST_Node("=",$$[$0-2],this._$.first_line,_$[$0-2].last_column),$$[$0-1], new AST_Node(";",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 42:
this.$ = new AST_Node("ASIGNACION","ASIGNACION_T2",this._$.first_line,_$[$0-1].last_column); this.$.addChilds(new AST_Node("id",$$[$0-9],this._$.first_line,_$[$0-9].last_column),new AST_Node("[",$$[$0-8],this._$.first_line,_$[$0-8].first_column),$$[$0-7],new AST_Node("]",$$[$0-6],this._$.first_line,_$[$0-6].first_column),new AST_Node("[",$$[$0-5],this._$.first_line,_$[$0-5].first_column),$$[$0-4],new AST_Node("]",$$[$0-3],this._$.first_line,_$[$0-3].first_column),new AST_Node("=",$$[$0-2],this._$.first_line,_$[$0-2].last_column),$$[$0-1], new AST_Node(";",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 43:
this.$=new AST_Node("ARREGLOS_DEC","ARREGLOS_DEC_T1",this._$.first_line,_$[$0-1].last_column); this.$.addChilds(new AST_Node("tipo",$$[$0-10],this._$.first_line,_$[$0-10].last_column),new AST_Node("id",$$[$0-9],this._$.first_line,_$[$0-9].first_column),new AST_Node("[",$$[$0-8],this._$.first_line,_$[$0-8].first_column),new AST_Node("]",$$[$0-7],this._$.first_line,_$[$0-7].first_column),new AST_Node("=",$$[$0-6],this._$.first_line,_$[$0-6].last_column),new AST_Node("new",$$[$0-5],this._$.first_line,_$[$0-5].first_column),new AST_Node("tipo",$$[$0-4],this._$.first_line,_$[$0-4].first_column),new AST_Node("[",$$[$0-3],this._$.first_line,_$[$0-3].first_column),$$[$0-2],new AST_Node("]",$$[$0-1],this._$.first_line,_$[$0-1].first_column),new AST_Node(";",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 44:
this.$=new AST_Node("ARREGLOS_DEC","ARREGLOS_DEC_T2",this._$.first_line,_$[$0-1].last_column); this.$.addChilds(new AST_Node("tipo",$$[$0-15],this._$.first_line,_$[$0-15].last_column),new AST_Node("id",$$[$0-14],this._$.first_line,_$[$0-14].first_column),new AST_Node("[",$$[$0-13],this._$.first_line,_$[$0-13].first_column),new AST_Node("]",$$[$0-12],this._$.first_line,_$[$0-12].first_column),new AST_Node("[",$$[$0-11],this._$.first_line,_$[$0-11].first_column),new AST_Node("]",$$[$0-10],this._$.first_line,_$[$0-10].first_column),new AST_Node("=",$$[$0-9],this._$.first_line,_$[$0-9].last_column),new AST_Node("new",$$[$0-8],this._$.first_line,_$[$0-8].first_column),new AST_Node("tipo",$$[$0-7],this._$.first_line,_$[$0-7].first_column),new AST_Node("[",$$[$0-6],this._$.first_line,_$[$0-6].first_column),$$[$0-5],new AST_Node("]",$$[$0-4],this._$.first_line,_$[$0-4].first_column),new AST_Node("[",$$[$0-3],this._$.first_line,_$[$0-3].first_column),$$[$0-2],new AST_Node("]",$$[$0-1],this._$.first_line,_$[$0-1].first_column),new AST_Node(";",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 45:
this.$=new AST_Node("ARREGLOS_DEC","ARREGLOS_DEC_T3",this._$.first_line,_$[$0].last_column); this.$.addChilds(new AST_Node("tipo",$$[$0-8],this._$.first_line,_$[$0-8].last_column),new AST_Node("id",$$[$0-7],this._$.first_line,_$[$0-7].first_column),new AST_Node("[",$$[$0-6],this._$.first_line,_$[$0-6].first_column),new AST_Node("]",$$[$0-5],this._$.first_line,_$[$0-5].first_column),new AST_Node("=",$$[$0-4],this._$.first_line,_$[$0-4].last_column),new AST_Node("[",$$[$0-3],this._$.first_line,_$[$0-3].first_column),new AST_Node("LIST_EXP",$$[$0-2],this._$.first_line,_$[$0-2].first_column),new AST_Node("]",$$[$0-1],this._$.first_line,_$[$0-1].first_column),new AST_Node(";",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 46:
this.$=new AST_Node("ARREGLOS_DEC","ARREGLOS_DEC_T4",this._$.first_line,_$[$0].last_column); this.$.addChilds(new AST_Node("tipo",$$[$0-10],this._$.first_line,_$[$0-10].last_column),new AST_Node("id",$$[$0-9],this._$.first_line,_$[$0-9].first_column),new AST_Node("[",$$[$0-8],this._$.first_line,_$[$0-8].first_column),new AST_Node("]",$$[$0-7],this._$.first_line,_$[$0-7].first_column),new AST_Node("[",$$[$0-6],this._$.first_line,_$[$0-6].first_column),new AST_Node("]",$$[$0-5],this._$.first_line,_$[$0-5].first_column),new AST_Node("=",$$[$0-4],this._$.first_line,_$[$0-4].last_column),new AST_Node("[",$$[$0-3],this._$.first_line,_$[$0-3].first_column),new AST_Node("LIST_DOB",$$[$0-2],this._$.first_line,_$[$0-2].first_column),new AST_Node("]",$$[$0-1],this._$.first_line,_$[$0-1].first_column),new AST_Node(";",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 47:
this.$=new AST_Node("ARREGLOS_DEC","ARREGLOS_DEC_T5",this._$.first_line,_$[$0-1].last_column); this.$.addChilds(new AST_Node("tipo",$$[$0-6],this._$.first_line,_$[$0-6].last_column),new AST_Node("id",$$[$0-5],this._$.first_line,_$[$0-5].first_column),new AST_Node("[",$$[$0-4],this._$.first_line,_$[$0-4].first_column),new AST_Node("]",$$[$0-3],this._$.first_line,_$[$0-3].first_column),new AST_Node("=",$$[$0-2],this._$.first_line,_$[$0-2].last_column),$$[$0-1],new AST_Node(";",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 48:
this.$= $$[$0-4]; $$[$0-4].push($$[$0-1]);
break;
case 49:
this.$=[$$[$0-1]];
break;
case 50:
this.$= $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 51:
this.$=[$$[$0]]; 
break;
case 52:
this.$ = new AST_Node("FINDEC","FINDEC",this._$.first_line,_$[$0].last_column); this.$.addChilds(new AST_Node("ptcoma",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 53:
this.$ = new AST_Node("FINDEC","FINDEC",this._$.first_line,_$[$0-2].last_column); this.$.addChilds(new AST_Node("=",$$[$0-2], this._$.first_line,_$[$0-2].last_column),$$[$0-1], new AST_Node(";",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 54:
this.$ = new AST_Node("INC_AND_DEC","INC_AND_DEC",this._$.first_line,_$[$0-1].last_column); this.$.addChilds(new AST_Node("++",$$[$0-1]+$$[$0],this._$.first_line,_$[$0-1].last_column));
break;
case 55:
this.$ = new AST_Node("INC_AND_DEC","INC_AND_DEC",this._$.first_line,_$[$0-1].last_column); this.$.addChilds(new AST_Node("--",$$[$0-1]+$$[$0],this._$.first_line,_$[$0-1].last_column));
break;
case 56:
this.$= new AST_Node("DECLARACION","DECLARACION",this._$.first_line,_$[$0].first_column); this.$.addChilds($$[$0])
break;
case 57:
this.$= new AST_Node("ID_LIST","ID_LIST"); this.$.addChilds($$[$0-2],new AST_Node(",",$$[$0-1],this._$.first_line,_$[$0].first_column) ,new AST_Node("id",$$[$0],this._$.first_line,_$[$0].first_column));
break;
case 58:
this.$= new AST_Node("ID_LIST","ID_LIST"); this.$.addChilds(new AST_Node("id",$$[$0],this._$.first_line,_$[$0].first_column))
break;
case 59:
this.$= new AST_Node("BLOQUE","BLOQUE",this._$.first_line,_$[$0-2].last_column); this.$.addChilds($$[$0-1])
break;
case 60:
this.$= new AST_Node("BLOQUE","BLOQUE",this._$.first_line,_$[$0-1].last_column);
break;
case 61:
this.$=new AST_Node("SWITCH","SWITCH",this._$.first_line,_$[$0-6].last_column); this.$.addChilds(new AST_Node("Tswhitch","switch",this._$.first_line,_$[$0-6].last_column),new AST_Node("(","(",this._$.first_line,_$[$0-5].last_column),$$[$0-4],new AST_Node(")",")",this._$.first_line,_$[$0-3].last_column),new AST_Node("{","{",this._$.first_line,_$[$0-2].first_column),$$[$0-1],new AST_Node("}","}",this._$.first_line,_$[$0].last_column))
break;
case 62:
this.$=new AST_Node("SWITCH","SWITCH",this._$.first_line,_$[$0-7].last_column); this.$.addChilds(new AST_Node("Tswhitch","switch",this._$.first_line,_$[$0-7].last_column),new AST_Node("(","(",this._$.first_line,_$[$0-6].last_column),$$[$0-5],new AST_Node(")",")",this._$.first_line,_$[$0-4].last_column),new AST_Node("{","{",this._$.first_line,_$[$0-3].first_column),$$[$0-2],$$[$0-1],new AST_Node("}","}",this._$.first_line,_$[$0].last_column));
break;
case 63:
this.$=new AST_Node("CASES","CASES",this._$.first_line,_$[$0].last_column); this.$.addChilds($$[$0-1],$$[$0])
break;
case 64:
this.$=new AST_Node("CASES","CASES",this._$.first_line,_$[$0].last_column); this.$.addChilds($$[$0])
break;
case 65:
this.$=new AST_Node("CASE","CASE",this._$.first_line,_$[$0-3].last_column); this.$.addChilds(new AST_Node("Tcase","case",this._$.first_line,_$[$0-3].last_column),$$[$0-2],new AST_Node(":",":",this._$.first_line,_$[$0-1].last_column),$$[$0]);
break;
case 66:
this.$=new AST_Node("CASE","CASE",this._$.first_line,_$[$0-2].last_column); this.$.addChilds(new AST_Node("Tcase","case",this._$.first_line,_$[$0-2].last_column),$$[$0-1],new AST_Node(":",":",this._$.first_line,_$[$0].last_column));
break;
case 67:
this.$=new AST_Node("DEFAULT","DEFAULT",this._$.first_line,_$[$0-2].last_column); this.$.addChilds(new AST_Node("Tdefault","default",this._$.first_line,_$[$0-2].last_column),new AST_Node(":",":",this._$.first_line,_$[$0-1].last_column),$$[$0])
break;
case 68:
this.$=new AST_Node("DEFAULT","DEFAULT",this._$.first_line,_$[$0-1].last_column); this.$.addChilds(new AST_Node("Tdefault","default",this._$.first_line,_$[$0-1].last_column),new AST_Node(":",":",this._$.first_line,_$[$0].last_column));
break;
case 69:
this.$= new AST_Node("IF","IF",this._$.first_line,_$[$0-4].last_column);this.$.addChilds($$[$0-2],$$[$0])
break;
case 70:
this.$= new AST_Node("IF","IF",this._$.first_line,_$[$0-6].last_column);  this.$.addChilds($$[$0-4],$$[$0-2],$$[$0])
break;
case 71:
this.$= new AST_Node("IF","IF",this._$.first_line,_$[$0-6].last_column); var aux = new AST_Node("ELSE","ELSE",this._$.first_line,_$[$0-1].last_column); aux.addChilds($$[$0]);this.$.addChilds($$[$0-4],$$[$0-2],aux)
break;
case 72:
this.$=new AST_Node("WHILE","WHILE",this._$.first_line,_$[$0-4].last_column); this.$.addChilds(new AST_Node("Twhile","while",this._$.first_line,_$[$0-4].last_column),new AST_Node("(","(",this._$.first_line,_$[$0-3].last_column),$$[$0-2],new AST_Node(")",")",this._$.first_line,_$[$0-1].last_column),$$[$0])
break;
case 73:
this.$=new AST_Node("DO_WHILE","DO_WHILE",this._$.first_line,_$[$0-5].last_column);this.$.addChilds(new AST_Node("Tdo",$$[$0-5],this._$.first_line,_$[$0-5].last_column),$$[$0-4],new AST_Node("Twhile",$$[$0-3],this._$.first_line,_$[$0-3].last_column),new AST_Node("(",$$[$0-2],this._$.first_line,_$[$0-2].last_column),$$[$0-1],new AST_Node(")",$$[$0],this._$.first_line,_$[$0].last_column))
break;
case 74:
this.$= new AST_Node("PRINT","PRINT",this._$.first_line,_$[$0-4].last_column); this.$.addChilds(new AST_Node("cout",$$[$0-4],this._$.first_line,_$[$0-4].last_column),new AST_Node("<<",$$[$0-3]+$$[$0-2],this._$.first_line,_$[$0-3].last_column),$$[$0-1],$$[$0])
break;
case 75:
this.$= new AST_Node("FIN_COUT","FIN_COUT",this._$.first_line,_$[$0].last_column); this.$.addChilds(new AST_Node(";",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 76:
this.$= new AST_Node("FIN_COUT","FIN_COUT",this._$.first_line,_$[$0-3].last_column); this.$.addChilds(new AST_Node("<<",$$[$0-3]+$$[$0-2],this._$.first_line,_$[$0-3].last_column),new AST_Node("endl",$$[$0-1],this._$.first_line,_$[$0-1].last_column),new AST_Node(";",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-1].last_column);this.$.addChilds($$[$0-2],new AST_Node("op",$$[$0-1],this._$.first_line,_$[$0-1].last_column),$$[$0]);
break;
case 91: case 93:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("op",$$[$0-1],this._$.first_line,_$[$0-1].last_column),$$[$0]);
break;
case 92:
this.$= new AST_Node("TO","TO",this._$.first_line,_$[$0-2].last_column);this.$.addChilds(new AST_Node("To",$$[$0-3],this._$.first_line,_$[$0-3].last_column),new AST_Node("(",$$[$0-2],this._$.first_line,_$[$0-2].last_column),$$[$0-1], new AST_Node(")",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 94:
this.$=new AST_Node("EXP","EXP",this._$.first_line,_$[$0-5].last_column); 
                                            this.$.addChilds($$[$0-3],new AST_Node(",",$$[$0-2],this._$.first_line,_$[$0-2].last_column),$$[$0-1]);
break;
case 95:
this.$=new AST_Node("TERNARIO","TERNARIO",this._$.first_line,_$[$0-4].last_column); 
                                            this.$.addChilds($$[$0-4],new AST_Node("?",$$[$0-3],this._$.first_line,_$[$0-3].last_column),$$[$0-2],new AST_Node(":",$$[$0-1],this._$.first_line,_$[$0-1].last_column),$$[$0]);
break;
case 96:
this.$=$$[$0-1]
break;
case 97:
this.$=new AST_Node("TO_STRING","TO_STRING",this._$.first_line,_$[$0-3].last_column); 
                                            this.$.addChilds(new AST_Node("tostring",$$[$0-3],this._$.first_line,_$[$0-3].last_column),new AST_Node("(",$$[$0-2],this._$.first_line,_$[$0-2].last_column),$$[$0-1],new AST_Node(")",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 98:
this.$=new AST_Node("LENGTH","LENGTH",this._$.first_line,_$[$0-2].last_column); 
                                            this.$.addChilds($$[$0-4],new AST_Node(".",$$[$0-3],this._$.first_line,_$[$0-3].last_column),new AST_Node("length",$$[$0-2],this._$.first_line,_$[$0-2].last_column),new AST_Node("(",$$[$0-1],this._$.first_line,_$[$0-1].last_column),new AST_Node(")",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 99:
this.$ = new AST_Node("LLAMADA","LLAMADA",this._$.first_line,_$[$0].last_column); this.$.addChilds($$[$0]);
break;
case 100:
this.$=new AST_Node("C_STR","C_STR",this._$.first_line,_$[$0-2].last_column); 
                                            this.$.addChilds($$[$0-4],new AST_Node(".",$$[$0-3],this._$.first_line,_$[$0-3].last_column),new AST_Node("c_str",$$[$0-2],this._$.first_line,_$[$0-2].last_column),new AST_Node("(",$$[$0-1],this._$.first_line,_$[$0-1].last_column),new AST_Node(")",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 101:
this.$=new AST_Node("TYPEOF","TYPEOF",this._$.first_line,_$[$0-3].last_column); 
                                            this.$.addChilds(new AST_Node("typeof",$$[$0-3],this._$.first_line,_$[$0-3].last_column),new AST_Node("(",$$[$0-2],this._$.first_line,_$[$0-2].last_column),$$[$0-1],new AST_Node(")",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 102:
this.$ = new AST_Node("ID_ARR","ID_ARR",this._$.first_line,_$[$0-3].last_column);  this.$.addChilds(new AST_Node("id",$$[$0-3],this._$.first_line,_$[$0-3].last_column),new AST_Node("[",$$[$0-2],this._$.first_line,_$[$0-2].last_column),$$[$0-1],new AST_Node("]",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 103:
this.$=new AST_Node("ROUND","ROUND",this._$.first_line,_$[$0-3].last_column); this.$.addChilds(new AST_Node("round",$$[$0-3],this._$.first_line,_$[$0-3].last_column),new AST_Node("(",$$[$0-2],this._$.first_line,_$[$0-2].last_column),$$[$0-1],new AST_Node(")",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 104:
this.$ = new AST_Node("ID_ARR_2","ID_ARR_2",this._$.first_line,_$[$0-6].last_column);  this.$.addChilds(new AST_Node("id",$$[$0-6],this._$.first_line,_$[$0-6].last_column),new AST_Node("[",$$[$0-5],this._$.first_line,_$[$0-5].last_column),$$[$0-4],new AST_Node("]",$$[$0-3],this._$.first_line,_$[$0-3].last_column),new AST_Node("[",$$[$0-2],this._$.first_line,_$[$0-2].last_column),$$[$0-1],new AST_Node("]",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 105:
this.$=new AST_Node("CAST","CAST",this._$.first_line,_$[$0-3].last_column); 
                                            this.$.addChilds(new AST_Node("cast",$$[$0-3]+$$[$0-2]+$$[$0-1],this._$.first_line,_$[$0-3].last_column),$$[$0]);
break;
case 106:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);
                                         var text = $$[$0].substr(0,$$[$0].length);
                                         text=text.replace(/\\n/g,"\n");
                                         text=text.replace(/\\t/g,"\t");
                                         text=text.replace(/\\r/g,"\r");
                                         text=text.replace(/\\\\/g,"\\");
                                         text=text.replace(/\\\"/g,"\"");
                                        this.$.addChilds(new AST_Node("string",text,this._$.first_line,_$[$0].last_column));
break;
case 107:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("numero",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 108:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("true",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 109:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("false",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 110:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("id",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 111:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("char",$$[$0],this._$.first_line,_$[$0].last_column));
break;
}
},
table: [{2:[1,3],3:1,4:2,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,15:12,16:13,17:14,18:$V0,19:16,20:17,21:18,22:19,23:20,24:$V1,25:22,26:$V2,29:$V3,30:$V4,36:$V5,37:$V6,42:$V7,51:$V8,53:$V9,60:$Va,62:$Vb,63:$Vc,64:$Vd},{1:[3]},{2:$Ve,5:[1,35],6:36,7:5,8:6,9:7,10:8,11:9,12:10,13:11,15:12,16:13,17:14,18:$V0,19:16,20:17,21:18,22:19,23:20,24:$V1,25:22,26:$V2,29:$V3,30:$V4,36:$V5,37:$V6,42:$V7,51:$V8,53:$V9,60:$Va,62:$Vb,63:$Vc,64:$Vd},{5:[1,38],14:$Vf},o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),{14:[1,40]},o($Vg,[2,12]),{14:[1,41]},o($Vg,[2,14]),{14:[1,42]},o($Vg,[2,16]),o($Vg,[2,17]),{14:[1,43]},o($Vg,[2,19]),o($Vg,[2,20]),{21:44,26:[1,45]},o($Vg,[2,22]),{26:[1,47],39:46,50:48},{2:$Ve,4:49,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,15:12,16:13,17:14,18:$V0,19:16,20:17,21:18,22:19,23:20,24:$V1,25:22,26:$V2,29:$V3,30:$V4,36:$V5,37:$V6,42:$V7,51:$V8,52:[1,50],53:$V9,60:$Va,62:$Vb,63:$Vc,64:$Vd},{31:[1,51]},{31:[1,52]},{31:[1,53]},{9:54,51:$V8},{65:[1,55]},{27:[1,59],31:$Vh,41:56,43:[1,57],48:$Vi,49:$Vj},{31:[1,62]},{26:[1,63]},{14:[1,65],21:72,26:$Vk,28:64,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{14:[1,81]},{1:[2,1]},o($Vg,[2,3]),{14:$Vf},{1:[2,2]},o($Vg,[2,23]),o($Vg,[2,11]),o($Vg,[2,13]),o($Vg,[2,15]),o($Vg,[2,18]),{14:[1,82]},{31:$Vh},{14:[1,84],27:[1,85],40:83},o($Vy,$Vz,{31:[1,87],43:[1,86]}),o([14,27],[2,56],{35:[1,88]}),{2:$Ve,6:36,7:5,8:6,9:7,10:8,11:9,12:10,13:11,15:12,16:13,17:14,18:$V0,19:16,20:17,21:18,22:19,23:20,24:$V1,25:22,26:$V2,29:$V3,30:$V4,36:$V5,37:$V6,42:$V7,51:$V8,52:[1,89],53:$V9,60:$Va,62:$Vb,63:$Vc,64:$Vd},o($VA,[2,60]),{21:72,26:$Vk,28:90,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{21:72,26:$Vk,28:91,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{21:72,26:$Vk,28:92,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{62:[1,93]},{65:[1,94]},o($VB,[2,39]),{21:72,26:$Vk,28:95,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{21:72,26:$Vk,28:100,31:$Vl,32:96,33:97,34:$VC,37:$VD,38:99,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{21:72,26:$Vk,28:102,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{48:[1,103]},{49:[1,104]},{7:105,37:[1,106]},{31:[1,107]},{14:[1,108],48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT},o($Vg,[2,27]),{21:72,26:$Vk,28:125,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{31:[1,126]},{21:72,26:$Vk,28:127,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{31:[1,128]},{21:72,26:$Vk,28:129,31:$Vl,37:[1,130],49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{31:[1,131]},o($VU,[2,99]),{31:[1,132]},o($VU,[2,110],{31:$Vh,43:[1,133]}),{31:[1,134]},o($VU,[2,106]),o($VU,[2,107]),o($VU,[2,108]),o($VU,[2,109]),o($VU,[2,111]),o($Vg,[2,25]),o($Vg,[2,21]),o($VV,[2,38]),o($VV,[2,52]),{21:72,26:$Vk,28:135,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{44:[1,136]},{32:137,34:$VC,37:$VD,38:99},{26:[1,138]},o($VA,[2,59]),{34:[1,139],48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT},{34:[1,140],48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT},{34:[1,141],48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT},{31:[1,142]},{21:72,26:$Vk,28:143,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{44:[1,144],48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT},o($VU,[2,28]),{34:[1,145],35:[1,146]},o($VW,[2,34]),{34:[1,147],35:[1,148]},o($VX,[2,31],{48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT}),{26:[1,149]},{14:[1,150],48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT},o($VB,[2,54]),o($VB,[2,55]),{21:72,26:$Vk,28:151,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{26:[1,152],39:46,50:48},{32:153,34:$VC,37:$VD,38:99},o($Vg,[2,26]),{21:72,26:$Vk,28:154,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{21:72,26:$Vk,28:155,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{21:72,26:$Vk,28:156,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{21:72,26:$Vk,28:157,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{21:72,26:$Vk,28:158,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{21:72,26:$Vk,28:159,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{21:72,26:$Vk,28:160,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{21:72,26:$Vk,28:161,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{21:72,26:$Vk,28:162,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{21:72,26:$Vk,28:163,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{21:72,26:$Vk,28:164,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{21:72,26:$Vk,28:165,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{21:72,26:$Vk,28:166,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{21:72,26:$Vk,28:167,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{21:72,26:$Vk,28:168,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{85:[1,169],86:[1,170]},o($VY,[2,91],{48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP}),{21:72,26:$Vk,28:171,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},o($VU,[2,93]),{21:72,26:$Vk,28:172,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{34:[1,173],48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT},{34:[1,174]},{21:72,26:$Vk,28:175,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{21:72,26:$Vk,28:176,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{21:72,26:$Vk,28:177,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{21:72,26:$Vk,28:178,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{14:[1,179],48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT},{27:[1,180],43:[1,181]},{9:182,51:$V8},o($Vy,[2,57]),{9:183,51:$V8},{51:[1,184]},{9:185,51:$V8},{21:72,26:$Vk,28:186,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{14:[1,189],48:$VE,49:$VF,65:[1,188],66:187,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT},{27:[1,190],43:[1,191]},o($VU,[2,29]),{21:72,26:$Vk,28:192,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},o($VW,[2,35]),{37:[1,193]},o($VX,[2,37]),o($Vg,[2,24]),{14:[1,194],48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT},o($Vy,$Vz),{9:195,51:$V8},o($VZ,[2,77],{68:$VH,69:$VI,70:$VJ}),o($VZ,[2,78],{68:$VH,69:$VI,70:$VJ}),o($VU,[2,79]),o($VU,[2,80]),o($VU,[2,81]),o($V_,[2,82],{48:$VE,49:$VF,68:$VH,69:$VI,70:$VJ}),o($V_,[2,83],{48:$VE,49:$VF,68:$VH,69:$VI,70:$VJ}),o($V_,[2,84],{48:$VE,49:$VF,68:$VH,69:$VI,70:$VJ}),o($V_,[2,85],{48:$VE,49:$VF,68:$VH,69:$VI,70:$VJ}),o($V_,[2,86],{48:$VE,49:$VF,68:$VH,69:$VI,70:$VJ}),o($V_,[2,87],{48:$VE,49:$VF,68:$VH,69:$VI,70:$VJ}),o($V_,[2,88],{48:$VE,49:$VF,68:$VH,69:$VI,70:$VJ}),o($VY,[2,89],{48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP}),o([14,34,35,44,58,78,82,84],[2,90],{48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ}),{48:$VE,49:$VF,58:[1,196],65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT},{31:[1,197]},{31:[1,198]},{34:[1,199],48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT},{35:[1,200],48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT},o($VU,[2,96]),{21:72,26:$Vk,28:201,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{34:[1,202],48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT},{34:[1,203],48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT},{44:[1,204],48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT},{34:[1,205],48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT},o($VV,[2,53]),{21:72,26:$Vk,28:208,31:$Vl,43:[1,207],45:[1,206],49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{44:[1,209]},o($Vg,[2,33]),o($Vg,[2,69],{61:[1,210]}),{54:211,56:212,57:$V$},o($Vg,[2,72]),{34:[1,214],48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT},o($Vg,[2,74]),{21:72,26:$Vk,28:163,31:$Vl,49:$Vm,65:[1,215],79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},o($Vg,[2,75]),{21:72,26:$Vk,28:216,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{21:72,26:$Vk,28:217,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},o($VX,[2,30],{48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT}),{26:[1,218]},{16:219,26:[1,220]},o($Vg,[2,32]),{21:72,26:$Vk,28:221,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{34:[1,222]},{34:[1,223]},o($VU,[2,92]),{21:72,26:$Vk,28:224,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},o($VU,[2,105]),o($VU,[2,97]),o($VU,[2,101]),o($VU,[2,102],{43:[1,225]}),o($VU,[2,103]),{37:[1,226]},{21:72,26:$Vk,28:228,31:$Vl,46:227,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{14:[1,229],48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT},{27:[1,230]},{9:232,10:231,51:$V8,60:$Va},{52:[1,233],55:234,56:235,57:$V$,59:[1,236]},o($V01,[2,64]),{21:72,26:$Vk,28:237,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{14:[2,73]},{67:[1,238]},{14:[1,239],48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT},{44:[1,240],48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT},o($VX,[2,36]),{34:[1,241]},{41:56,48:$Vi,49:$Vj},o([14,34,35,44,58],[2,95],{48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR}),o($VU,[2,98]),o($VU,[2,100]),{34:[1,242],48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT},{21:72,26:$Vk,28:243,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{43:[1,244]},{35:$V11,44:[1,245]},o($V21,[2,51],{48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT}),o($Vg,[2,47]),{43:[1,248],45:[1,247]},o($Vg,[2,70]),o($Vg,[2,71]),o($Vg,[2,61]),{52:[1,249]},o($V01,[2,63]),{58:[1,250]},{48:$VE,49:$VF,58:[1,251],65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT},{14:[1,252]},o($Vg,[2,41]),{27:[1,253]},{9:254,51:$V8},o($VU,[2,94]),{44:[1,255],48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT},{21:72,26:$Vk,28:256,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{14:[1,257]},{21:72,26:$Vk,28:258,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{37:[1,259]},{43:[1,261],47:260},o($Vg,[2,62]),{2:$Ve,4:262,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,15:12,16:13,17:14,18:$V0,19:16,20:17,21:18,22:19,23:20,24:$V1,25:22,26:$V2,29:$V3,30:$V4,36:$V5,37:$V6,42:$V7,51:$V8,52:[2,68],53:$V9,60:$Va,62:$Vb,63:$Vc,64:$Vd},o($V01,[2,66],{6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,15:12,16:13,17:14,19:16,20:17,21:18,22:19,23:20,25:22,4:263,2:$Ve,18:$V0,24:$V1,26:$V2,29:$V3,30:$V4,36:$V5,37:$V6,42:$V7,51:$V8,53:$V9,60:$Va,62:$Vb,63:$Vc,64:$Vd}),o($Vg,[2,76]),{21:72,26:$Vk,28:264,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},o($Vg,[2,40]),o($VU,[2,104]),{44:[1,265],48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT},o($Vg,[2,45]),o($V21,[2,50],{48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT}),{43:[1,266]},{35:[1,268],44:[1,267]},{21:72,26:$Vk,28:228,31:$Vl,46:269,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{2:$Ve,6:36,7:5,8:6,9:7,10:8,11:9,12:10,13:11,15:12,16:13,17:14,18:$V0,19:16,20:17,21:18,22:19,23:20,24:$V1,25:22,26:$V2,29:$V3,30:$V4,36:$V5,37:$V6,42:$V7,51:$V8,52:[2,67],53:$V9,60:$Va,62:$Vb,63:$Vc,64:$Vd},o($V01,[2,65],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,15:12,16:13,17:14,19:16,20:17,21:18,22:19,23:20,25:22,6:36,2:$Ve,18:$V0,24:$V1,26:$V2,29:$V3,30:$V4,36:$V5,37:$V6,42:$V7,51:$V8,53:$V9,60:$Va,62:$Vb,63:$Vc,64:$Vd}),{14:[1,270],48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT},{14:[1,271]},{21:72,26:$Vk,28:272,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},{14:[1,273]},{43:[1,274]},{35:$V11,44:[1,275]},o($Vg,[2,42]),o($Vg,[2,43]),{44:[1,276],48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT},o($Vg,[2,46]),{21:72,26:$Vk,28:228,31:$Vl,46:277,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},o($V21,[2,49]),{43:[1,278]},{35:$V11,44:[1,279]},{21:72,26:$Vk,28:280,31:$Vl,49:$Vm,79:$Vn,80:$Vo,81:$Vp,83:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx},o($V21,[2,48]),{44:[1,281],48:$VE,49:$VF,65:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,82:$VS,84:$VT},{14:[1,282]},o($Vg,[2,44])],
defaultActions: {35:[2,1],38:[2,2],214:[2,73]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

var cadena = '';
var errores = [];


const L_Error = require('./Analizador/L_Error');
const N_Error = require('./Analizador/N_Error');

    function AST_Node(tag,value,fila,columna){
        this.tag = tag;
        this.value = value;
        this.fila=fila;
        this.columna=columna;
        this.result = null;

        this.childs = [];

        this.addChilds = addChilds;
        this.getSon = getSon;

        function addChilds(){
            for (var i = 0; i < arguments.length; i++) {
                this.childs.push(arguments[i]);
                if (arguments[i]!== null){
                    arguments[i].padre = this;
                }
            }
        }  

        function getSon(pos){
            if(pos > this.hijos.length - 1) return null;
            return this.hijos[pos];
        }
    };

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://espacios en blanco
break;
case 1:
break;
case 2:
break;
case 3:return 14
break;
case 4:return 84
break;
case 5:return 85
break;
case 6:return 87
break;
case 7:return 68
break;
case 8:return 69
break;
case 9:return 49
break;
case 10:return 48
break;
case 11:return 71
break;
case 12:return 79
break;
case 13:return 81
break;
case 14:return 75
break;
case 15:return 76
break;
case 16:return 72
break;
case 17:return 70
break;
case 18:return 74
break;
case 19:return 65
break;
case 20:return 77
break;
case 21:return 78
break;
case 22:return 82
break;
case 23:return 58
break;
case 24:return 86
break;
case 25:return 31
break;
case 26:return 34
break;
case 27:return 35
break;
case 28:return 27
break;
case 29:return 51
break;
case 30:return 52
break;
case 31:return 43
break;
case 32:return 44
break;
case 33:return 83
break;
case 34:return 88
break;
case 35:return 80
break;
case 36:return 80
break;
case 37:return 24
break;
case 38:return 42
break;
case 39:return 67
break;
case 40:return 45
break;
case 41:return 64
break;
case 42:return 37
break;
case 43:return 37
break;
case 44:return 37
break;
case 45:return 37
break;
case 46:return 91
break;
case 47:return 92
break;
case 48:return 37
break;
case 49:return 60
break;
case 50:return 'Tprint' 
break;
case 51:return 61  
break;
case 52:return 62 
break;
case 53:return 63
break;
case 54:return 53
break;
case 55:return 57
break;
case 56:return 59
break;
case 57:return 18
break;
case 58:return 29
break;
case 59:return 36
break;
case 60:return 30
break;
case 61:return 26
break;
case 62:return 90
break;
case 63: yy_.yytext=yy_.yytext.substr(1, yy_.yyleng-2); return 93 
break;
case 64: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 89; 
break;
case 65:return 5
break;
case 66: errores.push({tipo: "Lexico", error: yy_.yytext, linea: yy_.yylloc.first_line, columna: yy_.yylloc.first_column+1}); return 'INVALID'; 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:;)/i,/^(?:\.)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:pow\b)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:%)/i,/^(?:>)/i,/^(?:<)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\?)/i,/^(?::)/i,/^(?:c_str\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:,)/i,/^(?:=)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:std::tostring\b)/i,/^(?:round\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:execute\b)/i,/^(?:for\b)/i,/^(?:endl\b)/i,/^(?:new\b)/i,/^(?:cout\b)/i,/^(?:bool\b)/i,/^(?:int\b)/i,/^(?:std::string\b)/i,/^(?:char\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:double\b)/i,/^(?:if\b)/i,/^(?:print\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:([a-zA-Z])([a-zA-Z0-9])*)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[']\\\\[']|[']\\"[']|[']\\'[']|[']\\n[']|[']\\t[']|[']\\r[']|['].?['])/i,/^(?:"[^\"]*")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"charLiteral":{"rules":[],"inclusive":false},"string":{"rules":[],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}