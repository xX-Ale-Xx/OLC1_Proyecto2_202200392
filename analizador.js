/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,20],$V2=[1,29],$V3=[1,33],$V4=[1,32],$V5=[1,31],$V6=[1,22],$V7=[1,30],$V8=[1,23],$V9=[1,25],$Va=[1,24],$Vb=[1,26],$Vc=[1,27],$Vd=[1,28],$Ve=[5,18,24,26,29,30,35,36,42,50,51,52,56,58,59,61,62,63],$Vf=[2,14],$Vg=[1,53],$Vh=[1,55],$Vi=[1,56],$Vj=[1,66],$Vk=[1,64],$Vl=[1,62],$Vm=[1,61],$Vn=[1,63],$Vo=[1,67],$Vp=[1,68],$Vq=[1,69],$Vr=[1,70],$Vs=[1,71],$Vt=[2,53],$Vu=[1,79],$Vv=[5,18,24,26,29,30,35,36,42,50,51,52,56,58,59,60,61,62,63],$Vw=[14,34],$Vx=[1,91],$Vy=[1,89],$Vz=[1,92],$VA=[1,100],$VB=[1,101],$VC=[1,109],$VD=[1,102],$VE=[1,103],$VF=[1,104],$VG=[1,105],$VH=[1,106],$VI=[1,107],$VJ=[1,108],$VK=[1,110],$VL=[1,111],$VM=[1,112],$VN=[1,113],$VO=[1,114],$VP=[14,34,38,44,48,49,57,64,67,68,69,70,71,72,73,74,75,76,77,80],$VQ=[5,18,24,26,29,30,31,35,36,42,49,50,51,52,56,58,59,61,62,63,78,79,81,82,83,84,85],$VR=[14,34,38,44,48,49,50,57,64,67,68,69,70,71,72,73,74,75,76,77,80],$VS=[14,27,34,38],$VT=[14,34,38,44,57,76,77,80],$VU=[34,38],$VV=[14,34,38,44,48,49,57,64,70,71,72,73,74,75,76,77,80],$VW=[14,34,38,44,57,64,70,71,72,73,74,75,76,77,80],$VX=[1,183],$VY=[51,56,58],$VZ=[1,213],$V_=[38,44],$V$=[18,24,26,29,30,35,36,42,50,51,52,56,58,59,61,62,63];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"DEC_VAR":7,"ARREGLOS_DEC":8,"BLOQUE":9,"IF":10,"SWITCH":11,"WHILE":12,"DO_WHILE":13,"Tptcoma":14,"PRINT":15,"INCREMENTO_O_DECREMENTO":16,"ASIGNACION":17,"Tsent_trans":18,"FOR":19,"FUNCION":20,"LLAMADA_FUNCION":21,"RETORNAR":22,"CONTINUE":23,"Texecute":24,"REASIGNACION":25,"Tid":26,"Tasigna1":27,"EXP":28,"Tcontinue":29,"Treturn":30,"Tparbre":31,"VALORES":32,"ID_LIST":33,"Tparcierra":34,"Tvoid":35,"PTipo":36,"PARAMETROS_LIST":37,"Tcoma":38,"DECLARACION_1":39,"FINDEC":40,"INC_AND_DEC":41,"Tfor":42,"Tcorchete1":43,"Tcorchete2":44,"Tnew":45,"LIST_EXP":46,"LIST_DOB":47,"Tmas":48,"Tmenos":49,"Tllave1":50,"Tllave2":51,"Tswitch":52,"CASES":53,"DEFAULT":54,"CASE":55,"Tcase":56,"Tdospuntos":57,"Tdefault":58,"Tif":59,"Telse":60,"Twhile":61,"Tdo":62,"Tcout":63,"Tmenor":64,"FIN_COUT":65,"Tendl":66,"Tpor":67,"Tdiv":68,"Tmod":69,"Tdiferente":70,"Tigual":71,"Tigualr":72,"Tmayor":73,"Tmayori":74,"Tmenori":75,"Tand":76,"Tor":77,"Tnot":78,"Tpow":79,"Tinterrogacion":80,"Tstring":81,"Tnumero":82,"Ttrue":83,"Tfalse":84,"Tchar":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"Tptcoma",18:"Tsent_trans",24:"Texecute",26:"Tid",27:"Tasigna1",29:"Tcontinue",30:"Treturn",31:"Tparbre",34:"Tparcierra",35:"Tvoid",36:"PTipo",38:"Tcoma",42:"Tfor",43:"Tcorchete1",44:"Tcorchete2",45:"Tnew",48:"Tmas",49:"Tmenos",50:"Tllave1",51:"Tllave2",52:"Tswitch",56:"Tcase",57:"Tdospuntos",58:"Tdefault",59:"Tif",60:"Telse",61:"Twhile",62:"Tdo",63:"Tcout",64:"Tmenor",66:"Tendl",67:"Tpor",68:"Tdiv",69:"Tmod",70:"Tdiferente",71:"Tigual",72:"Tigualr",73:"Tmayor",74:"Tmayori",75:"Tmenori",76:"Tand",77:"Tor",78:"Tnot",79:"Tpow",80:"Tinterrogacion",81:"Tstring",82:"Tnumero",83:"Ttrue",84:"Tfalse",85:"Tchar"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,3],[6,1],[25,4],[23,2],[22,3],[22,2],[21,3],[21,4],[20,5],[20,5],[32,1],[32,2],[37,4],[37,2],[7,3],[16,2],[19,8],[17,7],[17,10],[8,11],[8,16],[8,9],[8,11],[47,5],[47,3],[46,3],[46,1],[40,1],[40,3],[41,2],[41,2],[39,1],[33,3],[33,1],[9,3],[9,2],[11,7],[11,8],[53,2],[53,1],[55,4],[55,6],[55,5],[55,3],[54,3],[54,2],[10,5],[10,7],[10,7],[12,5],[13,6],[15,5],[65,1],[65,4],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,2],[28,2],[28,6],[28,5],[28,3],[28,1],[28,4],[28,7],[28,4],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=new AST_Node("RAIZ","RAIZ",this.$first_line,_$[$0-1].last_column);this.$.addChilds($$[$0-1]);return this.$
break;
case 2:

this.$= new AST_Node("SENTENCIAS","SENTENCIAS",this._$.first_line,_$[$0].last_column); this.$.addChilds($$[$0-1],$$[$0])

break;
case 3:
this.$= new AST_Node("SENTENCIAS","SENTENCIAS",this._$.first_line,_$[$0].last_column);
                      this.$.addChilds($$[$0]);
break;
case 4:
this.$= new AST_Node("SENTENCIA","SENTENCIA",this._$.first_line,_$[$0].last_column); this.$.addChilds($$[$0]);
break;
case 5:
this.$ = new AST_Node("SENTENCIA_ARR","SENTENCIA_ARR",this._$.first_line,_$[$0].last_column); this.$.addChilds($$[$0]);
break;
case 6: case 7: case 11:
this.$=$$[$0]
break;
case 8:
this.$= new AST_Node("SENTENCIA_SWITCH","SENTENCIA_SWITCH",this._$.first_line,_$[$0].last_column); this.$.addChilds($$[$0]);
break;
case 9:
this.$= new AST_Node("SENTENCIA_WHILE","SENTENCIA_WHILE",this._$.first_line,_$[$0].last_column);this.$.addChilds($$[$0]);
break;
case 10:
this.$=new AST_Node("SENTENCIA_DO_WHILE","SENTENCIA_DO_WHILE",this._$.first_line,_$[$0].last_column);this.$.addChilds($$[$0-1],new AST_Node(";",";",this._$.first_line,_$[$0].last_column));
break;
case 12:
this.$=new AST_Node("SENTENCIA_IAD","SENTENCIA_IAD",this._$.first_line,_$[$0-1].last_column);this.$.addChilds($$[$0-1],new AST_Node(";",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 13:
this.$=new AST_Node("SENTENCIA_ASIG", "SENTENCIA_ASIG", this._$.first_line,_$[$0].last_column); this.$.addChilds($$[$0]);
break;
case 14:
this.$=new AST_Node("SENTENCIA_TR","SENTENCIA_TR",this._$.first_line,_$[$0].last_column); this.$.addChilds(new AST_Node("Tsent_trans",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 15:
 this.$=new AST_Node("SENTENCIA_FOR","SENTENCIA_FOR",this._$.first_line,_$[$0].last_column); this.$.addChilds($$[$0]); 
break;
case 16:
this.$=new AST_Node("SENTENCIA_FUNCION","SENTENCIA_FUNCION",this._$.first_line,_$[$0].last_column); this.$.addChilds($$[$0]); 
break;
case 17:
this.$=new AST_Node("SENTENCIA_LLAMADA","SENTENCIA_LLAMADA",this._$.first_line,_$[$0-1].last_column); this.$.addChilds($$[$0-1],new AST_Node(";",";",this._$.first_line,_$[$0].last_column));
break;
case 18:
this.$=new AST_Node("SENTENCIA_RETORNAR","SENTENCIA_RETORNAR",this._$.first_line,_$[$0].last_column); this.$.addChilds($$[$0]);
break;
case 19:
 this.$=new AST_Node("SENTENCIA_CONTINUE","SENTENCIA_CONTINUE",this._$.first_line,_$[$0].last_column); this.$.addChilds($$[$0]);
break;
case 20:
this.$=new AST_Node("SENTENCIA_EXECUTE","SENTENCIA_EXECUTE",this._$.first_line,_$[$0-2].last_column); this.$.addChilds(new AST_Node("Texecute",$$[$0-2],this._$.first_line,_$[$0-2].last_column),$$[$0-1],new AST_Node(";",";",this._$.first_line,_$[$0].last_column));
break;
case 21:
this.$=new AST_Node("SENTENCIA_REASIG","SENTENCIA_REASIG",this._$.first_line,_$[$0].last_column); this.$.addChilds($$[$0]);
break;
case 22:
this.$=new AST_Node("REASIGNACION","REASIGNACION",this._$.first_line,_$[$0-1].last_column); this.$.addChilds(new AST_Node("id",$$[$0-3],this._$.first_line,_$[$0-3].last_column),new AST_Node("=",$$[$0-2],this._$.first_line,_$[$0-2].last_column),$$[$0-1],new AST_Node(";",";",this._$.first_line,_$[$0].last_column));
break;
case 23:
this.$=new AST_Node("CONTINUE","CONTINUE",this._$.first_line,_$[$0-1].last_column); this.$.addChilds(new AST_Node("Tcontinue",$$[$0-1],this._$.first_line,_$[$0-1].last_column),new AST_Node(";",";",this._$.first_line,_$[$0].last_column));
break;
case 24:
this.$=new AST_Node("RETORNAR","RETORNAR",this._$.first_line,_$[$0-2].last_column); this.$.addChilds(new AST_Node("Treturn",$$[$0-2],this._$.first_line,_$[$0-2].last_column),$$[$0-1],new AST_Node(";",";",this._$.first_line,_$[$0].last_column));
break;
case 25:
this.$=new AST_Node("RETORNAR","RETORNAR",this._$.first_line,_$[$0-1].last_column); this.$.addChilds(new AST_Node("Treturn",$$[$0-1],this._$.first_line,_$[$0-1].last_column),new AST_Node(";",";",this._$.first_line,_$[$0].last_column));
break;
case 26:
this.$=new AST_Node("LLAMADA_FUNCION","LLAMADA_FUNCION",this._$.first_line,_$[$0-2].last_column); this.$.addChilds(new AST_Node("id",$$[$0-2],this._$.first_line,_$[$0-2].last_column),new AST_Node("(","(",this._$.first_line,_$[$0-1].last_column),$$[$0]);
break;
case 27:
this.$=new AST_Node("LLAMADA_FUNCION","LLAMADA_FUNCION",this._$.first_line,_$[$0-3].last_column); this.$.addChilds(new AST_Node("id",$$[$0-3],this._$.first_line,_$[$0-3].last_column),new AST_Node("(","(",this._$.first_line,_$[$0-2].last_column),$$[$0-1],new AST_Node(")",")",this._$.first_line,_$[$0].last_column));
break;
case 28:
this.$=new AST_Node("FUNCION","FUNCION",this._$.first_line,_$[$0-4].last_column); this.$.addChilds(new AST_Node("Tvoid",$$[$0-4],this._$.first_line,_$[$0-4].last_column),new AST_Node("id",$$[$0-3],this._$.first_line,_$[$0-3].last_column),new AST_Node("(","(",this._$.first_line,_$[$0-2].last_column), $$[$0-1], $$[$0]);
break;
case 29:
this.$=new AST_Node("FUNCION","FUNCION",this._$.first_line,_$[$0-4].last_column); this.$.addChilds(new AST_Node("PTipo",$$[$0-4],this._$.first_line,_$[$0-4].last_column),new AST_Node("id",$$[$0-3],this._$.first_line,_$[$0-3].last_column),new AST_Node("(","(",this._$.first_line,_$[$0-2].last_column), $$[$0-1], $$[$0]);
break;
case 30:
this.$=new AST_Node("VALORES","VALORES",this._$.first_line,_$[$0].last_column); this.$.addChilds(new AST_Node(")",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 31:
this.$= new AST_Node("VALORES","VALORES",this._$.first_line,_$[$0-1].last_column); this.$.addChilds($$[$0-1],new AST_Node(")",")",this._$.first_line,_$[$0].last_column));
break;
case 32:
this.$ = new AST_Node("PARAMETROS_LIST","PARAMETROS_LIST",this._$.first_line,_$[$0-3].last_column); this.$.addChilds($$[$0-3], new AST_Node(",",",",this._$.first_line,_$[$0-2].last_column), new AST_Node("PTipo",$$[$0-1],this._$.first_line,_$[$0-1].last_column), new AST_Node("id",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 33:
this.$=new AST_Node("PARAMETROS_LIST","PARAMETROS_LIST",this._$.first_line,_$[$0-1].last_column); this.$.addChilds(new AST_Node("PTipo",$$[$0-1],this._$.first_line,_$[$0-1].last_column),new AST_Node("id",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 34:
this.$= new AST_Node("DEC_VAR","DEC_VAR",this._$.first_line,_$[$0-1].last_column);this.$.addChilds(new AST_Node("tipo",$$[$0-2],this._$.first_line,_$[$0-2].last_column),$$[$0-1], $$[$0]);
break;
case 35:
this.$=new AST_Node("INCREMENTO_O_DECREMENTO","INCREMENTO_O_DECREMENTO",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("id",$$[$0-1],this._$.first_line,_$[$0-1].last_column),$$[$0]);
break;
case 36:
this.$=new AST_Node("FOR","FOR",this._$.first_line,_$[$0-7].last_column); this.$.addChilds(new AST_Node("Tfor",$$[$0-7],this._$.first_line,_$[$0-7].last_column),new AST_Node("(","(",this._$.first_line,_$[$0-6].last_column),$$[$0-5],$$[$0-4],new AST_Node(";",";",this._$.first_line,_$[$0-4].last_column), $$[$0-2],new AST_Node(")",")",this._$.first_line,_$[$0-1].last_column),$$[$0]) 
break;
case 37:
this.$=new AST_Node("ASIGNACION","ASIGNACION_T1",this._$.first_line,_$[$0-2].last_column); this.$.addChilds(new AST_Node("id",$$[$0-6],this._$.first_line,_$[$0-6].last_column),new AST_Node("[",$$[$0-5],this._$.first_line,_$[$0-5].first_column),$$[$0-4],new AST_Node("]",$$[$0-3],this._$.first_line,_$[$0-3].first_column),new AST_Node("=",$$[$0-2],this._$.first_line,_$[$0-2].last_column),$$[$0-1], new AST_Node(";",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 38:
this.$ = new AST_Node("ASIGNACION","ASIGNACION_T2",this._$.first_line,_$[$0-1].last_column); this.$.addChilds(new AST_Node("id",$$[$0-9],this._$.first_line,_$[$0-9].last_column),new AST_Node("[",$$[$0-8],this._$.first_line,_$[$0-8].first_column),$$[$0-7],new AST_Node("]",$$[$0-6],this._$.first_line,_$[$0-6].first_column),new AST_Node("[",$$[$0-5],this._$.first_line,_$[$0-5].first_column),$$[$0-4],new AST_Node("]",$$[$0-3],this._$.first_line,_$[$0-3].first_column),new AST_Node("=",$$[$0-2],this._$.first_line,_$[$0-2].last_column),$$[$0-1], new AST_Node(";",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 39:
this.$=new AST_Node("ARREGLOS_DEC","ARREGLOS_DEC_T1",this._$.first_line,_$[$0-1].last_column); this.$.addChilds(new AST_Node("tipo",$$[$0-10],this._$.first_line,_$[$0-10].last_column),new AST_Node("id",$$[$0-9],this._$.first_line,_$[$0-9].first_column),new AST_Node("[",$$[$0-8],this._$.first_line,_$[$0-8].first_column),new AST_Node("]",$$[$0-7],this._$.first_line,_$[$0-7].first_column),new AST_Node("=",$$[$0-6],this._$.first_line,_$[$0-6].last_column),new AST_Node("new",$$[$0-5],this._$.first_line,_$[$0-5].first_column),new AST_Node("tipo",$$[$0-4],this._$.first_line,_$[$0-4].first_column),new AST_Node("[",$$[$0-3],this._$.first_line,_$[$0-3].first_column),$$[$0-2],new AST_Node("]",$$[$0-1],this._$.first_line,_$[$0-1].first_column),new AST_Node(";",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 40:
this.$=new AST_Node("ARREGLOS_DEC","ARREGLOS_DEC_T2",this._$.first_line,_$[$0-1].last_column); this.$.addChilds(new AST_Node("tipo",$$[$0-15],this._$.first_line,_$[$0-15].last_column),new AST_Node("id",$$[$0-14],this._$.first_line,_$[$0-14].first_column),new AST_Node("[",$$[$0-13],this._$.first_line,_$[$0-13].first_column),new AST_Node("]",$$[$0-12],this._$.first_line,_$[$0-12].first_column),new AST_Node("[",$$[$0-11],this._$.first_line,_$[$0-11].first_column),new AST_Node("]",$$[$0-10],this._$.first_line,_$[$0-10].first_column),new AST_Node("=",$$[$0-9],this._$.first_line,_$[$0-9].last_column),new AST_Node("new",$$[$0-8],this._$.first_line,_$[$0-8].first_column),new AST_Node("tipo",$$[$0-7],this._$.first_line,_$[$0-7].first_column),new AST_Node("[",$$[$0-6],this._$.first_line,_$[$0-6].first_column),$$[$0-5],new AST_Node("]",$$[$0-4],this._$.first_line,_$[$0-4].first_column),new AST_Node("[",$$[$0-3],this._$.first_line,_$[$0-3].first_column),$$[$0-2],new AST_Node("]",$$[$0-1],this._$.first_line,_$[$0-1].first_column),new AST_Node(";",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 41:
this.$=new AST_Node("ARREGLOS_DEC","ARREGLOS_DEC_T3",this._$.first_line,_$[$0].last_column); this.$.addChilds(new AST_Node("tipo",$$[$0-8],this._$.first_line,_$[$0-8].last_column),new AST_Node("id",$$[$0-7],this._$.first_line,_$[$0-7].first_column),new AST_Node("[",$$[$0-6],this._$.first_line,_$[$0-6].first_column),new AST_Node("]",$$[$0-5],this._$.first_line,_$[$0-5].first_column),new AST_Node("=",$$[$0-4],this._$.first_line,_$[$0-4].last_column),new AST_Node("[",$$[$0-3],this._$.first_line,_$[$0-3].first_column),new AST_Node("LIST_EXP",$$[$0-2],this._$.first_line,_$[$0-2].first_column),new AST_Node("]",$$[$0-1],this._$.first_line,_$[$0-1].first_column),new AST_Node(";",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 42:
this.$=new AST_Node("ARREGLOS_DEC","ARREGLOS_DEC_T4",this._$.first_line,_$[$0].last_column); this.$.addChilds(new AST_Node("tipo",$$[$0-10],this._$.first_line,_$[$0-10].last_column),new AST_Node("id",$$[$0-9],this._$.first_line,_$[$0-9].first_column),new AST_Node("[",$$[$0-8],this._$.first_line,_$[$0-8].first_column),new AST_Node("]",$$[$0-7],this._$.first_line,_$[$0-7].first_column),new AST_Node("[",$$[$0-6],this._$.first_line,_$[$0-6].first_column),new AST_Node("]",$$[$0-5],this._$.first_line,_$[$0-5].first_column),new AST_Node("=",$$[$0-4],this._$.first_line,_$[$0-4].last_column),new AST_Node("[",$$[$0-3],this._$.first_line,_$[$0-3].first_column),new AST_Node("LIST_DOB",$$[$0-2],this._$.first_line,_$[$0-2].first_column),new AST_Node("]",$$[$0-1],this._$.first_line,_$[$0-1].first_column),new AST_Node(";",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 43:
this.$= $$[$0-4]; $$[$0-4].push($$[$0-1]);
break;
case 44:
this.$=[$$[$0-1]];
break;
case 45:
this.$= $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 46:
this.$=[$$[$0]]; 
break;
case 47:
this.$ = new AST_Node("FINDEC","FINDEC",this._$.first_line,_$[$0].last_column); this.$.addChilds(new AST_Node("ptcoma",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 48:
this.$ = new AST_Node("FINDEC","FINDEC",this._$.first_line,_$[$0-2].last_column); this.$.addChilds(new AST_Node("=",$$[$0-2], this._$.first_line,_$[$0-2].last_column),$$[$0-1], new AST_Node(";",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 49:
this.$ = new AST_Node("INC_AND_DEC","INC_AND_DEC",this._$.first_line,_$[$0-1].last_column); this.$.addChilds(new AST_Node("++",$$[$0-1]+$$[$0],this._$.first_line,_$[$0-1].last_column));
break;
case 50:
this.$ = new AST_Node("INC_AND_DEC","INC_AND_DEC",this._$.first_line,_$[$0-1].last_column); this.$.addChilds(new AST_Node("--",$$[$0-1]+$$[$0],this._$.first_line,_$[$0-1].last_column));
break;
case 51:
this.$= new AST_Node("DECLARACION","DECLARACION",this._$.first_line,_$[$0].first_column); this.$.addChilds($$[$0])
break;
case 52:
this.$= new AST_Node("ID_LIST","ID_LIST"); this.$.addChilds($$[$0-2],new AST_Node(",",$$[$0-1],this._$.first_line,_$[$0].first_column) ,new AST_Node("id",$$[$0],this._$.first_line,_$[$0].first_column));
break;
case 53:
this.$= new AST_Node("ID_LIST","ID_LIST"); this.$.addChilds(new AST_Node("id",$$[$0],this._$.first_line,_$[$0].first_column))
break;
case 54:
this.$= new AST_Node("BLOQUE","BLOQUE",this._$.first_line,_$[$0-2].last_column); this.$.addChilds($$[$0-1])
break;
case 55:
this.$= new AST_Node("BLOQUE","BLOQUE",this._$.first_line,_$[$0-1].last_column);
break;
case 56:
this.$=new AST_Node("SWITCH","SWITCH",this._$.first_line,_$[$0-6].last_column); this.$.addChilds(new AST_Node("Tswhitch","switch",this._$.first_line,_$[$0-6].last_column),new AST_Node("(","(",this._$.first_line,_$[$0-5].last_column),$$[$0-4],new AST_Node(")",")",this._$.first_line,_$[$0-3].last_column),new AST_Node("{","{",this._$.first_line,_$[$0-2].first_column),$$[$0-1],new AST_Node("}","}",this._$.first_line,_$[$0].last_column))
break;
case 57:
this.$=new AST_Node("SWITCH","SWITCH",this._$.first_line,_$[$0-7].last_column); this.$.addChilds(new AST_Node("Tswhitch","switch",this._$.first_line,_$[$0-7].last_column),new AST_Node("(","(",this._$.first_line,_$[$0-6].last_column),$$[$0-5],new AST_Node(")",")",this._$.first_line,_$[$0-4].last_column),new AST_Node("{","{",this._$.first_line,_$[$0-3].first_column),$$[$0-2],$$[$0-1],new AST_Node("}","}",this._$.first_line,_$[$0].last_column));
break;
case 58:
this.$=new AST_Node("CASES","CASES",this._$.first_line,_$[$0].last_column); this.$.addChilds($$[$0-1],$$[$0])
break;
case 59:
this.$=new AST_Node("CASES","CASES",this._$.first_line,_$[$0].last_column); this.$.addChilds($$[$0])
break;
case 60:
this.$=new AST_Node("CASE","CASE",this._$.first_line,_$[$0-3].last_column); this.$.addChilds(new AST_Node("Tcase","case",this._$.first_line,_$[$0-3].last_column),$$[$0-2],new AST_Node(":",":",this._$.first_line,_$[$0-1].last_column),$$[$0]);
break;
case 61:
this.$=new AST_Node("CASE","CASE",this._$.first_line,_$[$0-5].last_column); this.$.addChilds(new AST_Node("Tcase","case",this._$.first_line,_$[$0-5].last_column),$$[$0-4],new AST_Node(":",":",this._$.first_line,_$[$0-3].last_column),$$[$0-2],new AST_Node("Tsentencia_trans",$$[$0-1],this._$.first_line,_$[$0-1].last_column),new AST_Node(";",";",this._$.first_line,_$[$0].last_column));
break;
case 62:
this.$=new AST_Node("CASE","CASE",this._$.first_line,_$[$0-4].last_column); this.$.addChilds(new AST_Node("Tcase","case",this._$.first_line,_$[$0-4].last_column),$$[$0-3],new AST_Node(":",":",this._$.first_line,_$[$0-2].last_column),new AST_Node("Tsentencia_trans",$$[$0-1],this._$.first_line,_$[$0-1].last_column),new AST_Node(";",";",this._$.first_line,_$[$0].last_column));
break;
case 63:
this.$=new AST_Node("CASE","CASE",this._$.first_line,_$[$0-2].last_column); this.$.addChilds(new AST_Node("Tcase","case",this._$.first_line,_$[$0-2].last_column),$$[$0-1],new AST_Node(":",":",this._$.first_line,_$[$0].last_column));
break;
case 64:
this.$=new AST_Node("DEFAULT","DEFAULT",this._$.first_line,_$[$0-2].last_column); this.$.addChilds(new AST_Node("Tdefault","default",this._$.first_line,_$[$0-2].last_column),new AST_Node(":",":",this._$.first_line,_$[$0-1].last_column),$$[$0])
break;
case 65:
this.$=new AST_Node("DEFAULT","DEFAULT",this._$.first_line,_$[$0-1].last_column); this.$.addChilds(new AST_Node("Tdefault","default",this._$.first_line,_$[$0-1].last_column),new AST_Node(":",":",this._$.first_line,_$[$0].last_column));
break;
case 66:
this.$= new AST_Node("IF","IF",this._$.first_line,_$[$0-4].last_column);this.$.addChilds($$[$0-2],$$[$0])
break;
case 67:
this.$= new AST_Node("IF","IF",this._$.first_line,_$[$0-6].last_column);  this.$.addChilds($$[$0-4],$$[$0-2],$$[$0])
break;
case 68:
this.$= new AST_Node("IF","IF",this._$.first_line,_$[$0-6].last_column); var aux = new AST_Node("ELSE","ELSE",this._$.first_line,_$[$0-1].last_column); aux.addChilds($$[$0]);this.$.addChilds($$[$0-4],$$[$0-2],aux)
break;
case 69:
this.$=new AST_Node("WHILE","WHILE",this._$.first_line,_$[$0-4].last_column); this.$.addChilds(new AST_Node("Twhile","while",this._$.first_line,_$[$0-4].last_column),new AST_Node("(","(",this._$.first_line,_$[$0-3].last_column),$$[$0-2],new AST_Node(")",")",this._$.first_line,_$[$0-1].last_column),$$[$0])
break;
case 70:
this.$=new AST_Node("DO_WHILE","DO_WHILE",this._$.first_line,_$[$0-5].last_column);this.$.addChilds(new AST_Node("Tdo",$$[$0-5],this._$.first_line,_$[$0-5].last_column),$$[$0-4],new AST_Node("Twhile",$$[$0-3],this._$.first_line,_$[$0-3].last_column),new AST_Node("(",$$[$0-2],this._$.first_line,_$[$0-2].last_column),$$[$0-1],new AST_Node(")",$$[$0],this._$.first_line,_$[$0].last_column))
break;
case 71:
this.$= new AST_Node("PRINT","PRINT",this._$.first_line,_$[$0-4].last_column); this.$.addChilds(new AST_Node("cout",$$[$0-4],this._$.first_line,_$[$0-4].last_column),new AST_Node("<<",$$[$0-3]+$$[$0-2],this._$.first_line,_$[$0-3].last_column),$$[$0-1],$$[$0])
break;
case 72:
this.$= new AST_Node("FIN_COUT","FIN_COUT",this._$.first_line,_$[$0].last_column); this.$.addChilds(new AST_Node(";",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 73:
this.$= new AST_Node("FIN_COUT","FIN_COUT",this._$.first_line,_$[$0-3].last_column); this.$.addChilds(new AST_Node("<<",$$[$0-3]+$$[$0-2],this._$.first_line,_$[$0-3].last_column),new AST_Node("endl",$$[$0-1],this._$.first_line,_$[$0-1].last_column),new AST_Node(";",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0-1].last_column);this.$.addChilds($$[$0-2],new AST_Node("op",$$[$0-1],this._$.first_line,_$[$0-1].last_column),$$[$0]);
break;
case 88: case 89:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("op",$$[$0-1],this._$.first_line,_$[$0-1].last_column),$$[$0]);
break;
case 90:
this.$=new AST_Node("EXP","EXP",this._$.first_line,_$[$0-5].last_column); 
                                            this.$.addChilds($$[$0-3],new AST_Node(",",$$[$0-2],this._$.first_line,_$[$0-2].last_column),$$[$0-1]);
break;
case 91:
this.$=new AST_Node("TERNARIO","TERNARIO",this._$.first_line,_$[$0-4].last_column); 
                                            this.$.addChilds($$[$0-4],new AST_Node("?",$$[$0-3],this._$.first_line,_$[$0-3].last_column),$$[$0-2],new AST_Node(":",$$[$0-1],this._$.first_line,_$[$0-1].last_column),$$[$0]);
break;
case 92:
this.$=$$[$0-1]
break;
case 93:
this.$ = new AST_Node("LLAMADA","LLAMADA",this._$.first_line,_$[$0].last_column); this.$.addChilds($$[$0]);
break;
case 94:
this.$ = new AST_Node("ID_ARR","ID_ARR",this._$.first_line,_$[$0-3].last_column);  this.$.addChilds(new AST_Node("id",$$[$0-3],this._$.first_line,_$[$0-3].last_column),new AST_Node("[",$$[$0-2],this._$.first_line,_$[$0-2].last_column),$$[$0-1],new AST_Node("]",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 95:
this.$ = new AST_Node("ID_ARR_2","ID_ARR_2",this._$.first_line,_$[$0-6].last_column);  this.$.addChilds(new AST_Node("id",$$[$0-6],this._$.first_line,_$[$0-6].last_column),new AST_Node("[",$$[$0-5],this._$.first_line,_$[$0-5].last_column),$$[$0-4],new AST_Node("]",$$[$0-3],this._$.first_line,_$[$0-3].last_column),new AST_Node("[",$$[$0-2],this._$.first_line,_$[$0-2].last_column),$$[$0-1],new AST_Node("]",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 96:
this.$=new AST_Node("CAST","CAST",this._$.first_line,_$[$0-3].last_column); 
                                            this.$.addChilds(new AST_Node("cast",$$[$0-3]+$$[$0-2]+$$[$0-1],this._$.first_line,_$[$0-3].last_column),$$[$0]);
break;
case 97:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);
                                         var text = $$[$0].substr(0,$$[$0].length);
                                         text=text.replace(/\\n/g,"\n");
                                         text=text.replace(/\\t/g,"\t");
                                         text=text.replace(/\\r/g,"\r");
                                         text=text.replace(/\\\\/g,"\\");
                                         text=text.replace(/\\\"/g,"\"");
                                        this.$.addChilds(new AST_Node("string",text,this._$.first_line,_$[$0].last_column));
break;
case 98:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("numero",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 99:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("true",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 100:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("false",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 101:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("id",$$[$0],this._$.first_line,_$[$0].last_column));
break;
case 102:
this.$= new AST_Node("EXP","EXP",this._$.first_line,_$[$0].last_column);this.$.addChilds(new AST_Node("char",$$[$0],this._$.first_line,_$[$0].last_column));
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:11,16:12,17:13,18:$V0,19:15,20:16,21:17,22:18,23:19,24:$V1,25:21,26:$V2,29:$V3,30:$V4,35:$V5,36:$V6,42:$V7,50:$V8,52:$V9,59:$Va,61:$Vb,62:$Vc,63:$Vd},{1:[3]},{5:[1,34],6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:11,16:12,17:13,18:$V0,19:15,20:16,21:17,22:18,23:19,24:$V1,25:21,26:$V2,29:$V3,30:$V4,35:$V5,36:$V6,42:$V7,50:$V8,52:$V9,59:$Va,61:$Vb,62:$Vc,63:$Vd},o($Ve,[2,3]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),{14:[1,36]},o($Ve,[2,11]),{14:[1,37]},o($Ve,[2,13]),o([5,18,24,26,29,30,35,36,42,50,51,52,59,61,62,63],$Vf),o($Ve,[2,15]),o($Ve,[2,16]),{14:[1,38]},o($Ve,[2,18]),o($Ve,[2,19]),{21:39,26:[1,40]},o($Ve,[2,21]),{26:[1,42],33:43,39:41},{4:44,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:11,16:12,17:13,18:$V0,19:15,20:16,21:17,22:18,23:19,24:$V1,25:21,26:$V2,29:$V3,30:$V4,35:$V5,36:$V6,42:$V7,50:$V8,51:[1,45],52:$V9,59:$Va,61:$Vb,62:$Vc,63:$Vd},{31:[1,46]},{31:[1,47]},{31:[1,48]},{9:49,50:$V8},{64:[1,50]},{27:[1,54],31:$Vg,41:51,43:[1,52],48:$Vh,49:$Vi},{31:[1,57]},{26:[1,58]},{14:[1,60],21:65,26:$Vj,28:59,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{14:[1,72]},{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,10]),o($Ve,[2,12]),o($Ve,[2,17]),{14:[1,73]},{31:$Vg},{14:[1,75],27:[1,76],40:74},o([14,27,38],$Vt,{31:[1,78],43:[1,77]}),o([14,27],[2,51],{38:$Vu}),{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:11,16:12,17:13,18:$V0,19:15,20:16,21:17,22:18,23:19,24:$V1,25:21,26:$V2,29:$V3,30:$V4,35:$V5,36:$V6,42:$V7,50:$V8,51:[1,80],52:$V9,59:$Va,61:$Vb,62:$Vc,63:$Vd},o($Vv,[2,55]),{21:65,26:$Vj,28:81,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{21:65,26:$Vj,28:82,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{21:65,26:$Vj,28:83,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{61:[1,84]},{64:[1,85]},o($Vw,[2,35]),{21:65,26:$Vj,28:86,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{26:$Vx,32:87,33:88,34:$Vy,36:$Vz,37:90},{21:65,26:$Vj,28:93,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{48:[1,94]},{49:[1,95]},{7:96,36:[1,97]},{31:[1,98]},{14:[1,99],48:$VA,49:$VB,64:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,80:$VO},o($Ve,[2,25]),{21:65,26:$Vj,28:115,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{21:65,26:$Vj,28:116,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{31:[1,117]},{21:65,26:$Vj,28:118,31:$Vk,36:[1,119],49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},o($VP,[2,93]),o($VP,[2,101],{31:$Vg,43:[1,120]}),o($VP,[2,97]),o($VP,[2,98]),o($VP,[2,99]),o($VP,[2,100]),o($VP,[2,102]),o($Ve,[2,23]),o($Ve,[2,20]),o($VQ,[2,34]),o($VQ,[2,47]),{21:65,26:$Vj,28:121,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{44:[1,122]},{32:123,34:$Vy,36:$Vz,37:90},{26:[1,124]},o($Vv,[2,54]),{34:[1,125],48:$VA,49:$VB,64:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,80:$VO},{34:[1,126],48:$VA,49:$VB,64:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,80:$VO},{34:[1,127],48:$VA,49:$VB,64:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,80:$VO},{31:[1,128]},{21:65,26:$Vj,28:129,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{44:[1,130],48:$VA,49:$VB,64:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,80:$VO},o($VP,[2,26]),{34:[1,131],38:$Vu},o($VR,[2,30]),{34:[1,132],38:[1,133]},o($VS,$Vt),{26:[1,134]},{14:[1,135],48:$VA,49:$VB,64:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,80:$VO},o($Vw,[2,49]),o($Vw,[2,50]),{21:65,26:$Vj,28:136,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{26:$Vx,33:43,39:41},{32:137,34:$Vy,36:$Vz,37:90},o($Ve,[2,24]),{21:65,26:$Vj,28:138,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{21:65,26:$Vj,28:139,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{21:65,26:$Vj,28:140,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{21:65,26:$Vj,28:141,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{21:65,26:$Vj,28:142,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{21:65,26:$Vj,28:143,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{21:65,26:$Vj,28:144,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{21:65,26:$Vj,28:145,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{21:65,26:$Vj,28:146,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{21:65,26:$Vj,28:147,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{21:65,26:$Vj,28:148,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{21:65,26:$Vj,28:149,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{21:65,26:$Vj,28:150,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{21:65,26:$Vj,28:151,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{21:65,26:$Vj,28:152,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},o($VT,[2,88],{48:$VA,49:$VB,64:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL}),o($VP,[2,89]),{21:65,26:$Vj,28:153,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{34:[1,154],48:$VA,49:$VB,64:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,80:$VO},{34:[1,155]},{21:65,26:$Vj,28:156,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{14:[1,157],48:$VA,49:$VB,64:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,80:$VO},{27:[1,158],43:[1,159]},{9:160,50:$V8},o($VS,[2,52]),{9:161,50:$V8},{50:[1,162]},{9:163,50:$V8},{21:65,26:$Vj,28:164,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{14:[1,167],48:$VA,49:$VB,64:[1,166],65:165,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,80:$VO},{27:[1,168],43:[1,169]},o($VP,[2,27]),o($VR,[2,31]),{36:[1,170]},o($VU,[2,33]),o($Ve,[2,22]),{14:[1,171],48:$VA,49:$VB,64:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,80:$VO},{9:172,50:$V8},o($VV,[2,74],{67:$VD,68:$VE,69:$VF}),o($VV,[2,75],{67:$VD,68:$VE,69:$VF}),o($VP,[2,76]),o($VP,[2,77]),o($VP,[2,78]),o($VW,[2,79],{48:$VA,49:$VB,67:$VD,68:$VE,69:$VF}),o($VW,[2,80],{48:$VA,49:$VB,67:$VD,68:$VE,69:$VF}),o($VW,[2,81],{48:$VA,49:$VB,67:$VD,68:$VE,69:$VF}),o($VW,[2,82],{48:$VA,49:$VB,67:$VD,68:$VE,69:$VF}),o($VW,[2,83],{48:$VA,49:$VB,67:$VD,68:$VE,69:$VF}),o($VW,[2,84],{48:$VA,49:$VB,67:$VD,68:$VE,69:$VF}),o($VW,[2,85],{48:$VA,49:$VB,67:$VD,68:$VE,69:$VF}),o($VT,[2,86],{48:$VA,49:$VB,64:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL}),o([14,34,38,44,57,77,80],[2,87],{48:$VA,49:$VB,64:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM}),{48:$VA,49:$VB,57:[1,173],64:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,80:$VO},{38:[1,174],48:$VA,49:$VB,64:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,80:$VO},o($VP,[2,92]),{21:65,26:$Vj,28:175,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{44:[1,176],48:$VA,49:$VB,64:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,80:$VO},o($VQ,[2,48]),{43:[1,178],45:[1,177]},{44:[1,179]},o($Ve,[2,29]),o($Ve,[2,66],{60:[1,180]}),{53:181,55:182,56:$VX},o($Ve,[2,69]),{34:[1,184],48:$VA,49:$VB,64:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,80:$VO},o($Ve,[2,71]),{21:65,26:$Vj,28:147,31:$Vk,49:$Vl,64:[1,185],78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},o($Ve,[2,72]),{21:65,26:$Vj,28:186,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{21:65,26:$Vj,28:187,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{26:[1,188]},{16:189,26:[1,190]},o($Ve,[2,28]),{21:65,26:$Vj,28:191,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{21:65,26:$Vj,28:192,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},o($VP,[2,96]),o($VP,[2,94],{43:[1,193]}),{36:[1,194]},{21:65,26:$Vj,28:196,31:$Vk,46:195,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{27:[1,197]},{9:199,10:198,50:$V8,59:$Va},{51:[1,200],54:201,55:202,56:$VX,58:[1,203]},o($VY,[2,59]),{21:65,26:$Vj,28:204,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{14:[2,70]},{66:[1,205]},{14:[1,206],48:$VA,49:$VB,64:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,80:$VO},{44:[1,207],48:$VA,49:$VB,64:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,80:$VO},o($VU,[2,32]),{34:[1,208]},{41:51,48:$Vh,49:$Vi},o([14,34,38,44,57],[2,91],{48:$VA,49:$VB,64:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN}),{34:[1,209],48:$VA,49:$VB,64:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,80:$VO},{21:65,26:$Vj,28:210,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{43:[1,211]},{38:$VZ,44:[1,212]},o($V_,[2,46],{48:$VA,49:$VB,64:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,80:$VO}),{43:[1,215],45:[1,214]},o($Ve,[2,67]),o($Ve,[2,68]),o($Ve,[2,56]),{51:[1,216]},o($VY,[2,58]),{57:[1,217]},{48:$VA,49:$VB,57:[1,218],64:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,80:$VO},{14:[1,219]},o($Ve,[2,37]),{27:[1,220]},{9:221,50:$V8},o($VP,[2,90]),{44:[1,222],48:$VA,49:$VB,64:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,80:$VO},{21:65,26:$Vj,28:223,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{14:[1,224]},{21:65,26:$Vj,28:225,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{36:[1,226]},{43:[1,228],47:227},o($Ve,[2,57]),{4:229,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:11,16:12,17:13,18:$V0,19:15,20:16,21:17,22:18,23:19,24:$V1,25:21,26:$V2,29:$V3,30:$V4,35:$V5,36:$V6,42:$V7,50:$V8,51:[2,65],52:$V9,59:$Va,61:$Vb,62:$Vc,63:$Vd},o($VY,[2,63],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:11,16:12,17:13,19:15,20:16,21:17,22:18,23:19,25:21,4:230,18:[1,231],24:$V1,26:$V2,29:$V3,30:$V4,35:$V5,36:$V6,42:$V7,50:$V8,52:$V9,59:$Va,61:$Vb,62:$Vc,63:$Vd}),o($Ve,[2,73]),{21:65,26:$Vj,28:232,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},o($Ve,[2,36]),o($VP,[2,95]),{44:[1,233],48:$VA,49:$VB,64:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,80:$VO},o($Ve,[2,41]),o($V_,[2,45],{48:$VA,49:$VB,64:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,80:$VO}),{43:[1,234]},{38:[1,236],44:[1,235]},{21:65,26:$Vj,28:196,31:$Vk,46:237,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:11,16:12,17:13,18:$V0,19:15,20:16,21:17,22:18,23:19,24:$V1,25:21,26:$V2,29:$V3,30:$V4,35:$V5,36:$V6,42:$V7,50:$V8,51:[2,64],52:$V9,59:$Va,61:$Vb,62:$Vc,63:$Vd},o($VY,[2,60],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:11,16:12,17:13,19:15,20:16,21:17,22:18,23:19,25:21,6:35,18:[1,238],24:$V1,26:$V2,29:$V3,30:$V4,35:$V5,36:$V6,42:$V7,50:$V8,52:$V9,59:$Va,61:$Vb,62:$Vc,63:$Vd}),o($V$,$Vf,{14:[1,239]}),{14:[1,240],48:$VA,49:$VB,64:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,80:$VO},{14:[1,241]},{21:65,26:$Vj,28:242,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},{14:[1,243]},{43:[1,244]},{38:$VZ,44:[1,245]},o($V$,$Vf,{14:[1,246]}),o($VY,[2,62]),o($Ve,[2,38]),o($Ve,[2,39]),{44:[1,247],48:$VA,49:$VB,64:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,80:$VO},o($Ve,[2,42]),{21:65,26:$Vj,28:196,31:$Vk,46:248,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},o($V_,[2,44]),o($VY,[2,61]),{43:[1,249]},{38:$VZ,44:[1,250]},{21:65,26:$Vj,28:251,31:$Vk,49:$Vl,78:$Vm,79:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs},o($V_,[2,43]),{44:[1,252],48:$VA,49:$VB,64:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,80:$VO},{14:[1,253]},o($Ve,[2,40])],
defaultActions: {34:[2,1],184:[2,70]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

var cadena = '';
var errores = [];


    function AST_Node(tag,value,fila,columna){
        this.tag = tag;
        this.value = value;
        this.fila=fila;
        this.columna=columna;
        this.result = null;

        this.childs = [];

        this.addChilds = addChilds;
        this.getSon = getSon;

        function addChilds(){
            for (var i = 0; i < arguments.length; i++) {
                this.childs.push(arguments[i]);
                if (arguments[i]!== null){
                    arguments[i].padre = this;
                }
            }
        }  

        function getSon(pos){
            if(pos > this.hijos.length - 1) return null;
            return this.hijos[pos];
        }
    };

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://espacios en blanco
break;
case 1:
break;
case 2:
break;
case 3:return 14
break;
case 4:return 67
break;
case 5:return 68
break;
case 6:return 49
break;
case 7:return 48
break;
case 8:return 70
break;
case 9:return 78
break;
case 10:return 79
break;
case 11:return 74
break;
case 12:return 75
break;
case 13:return 71
break;
case 14:return 69
break;
case 15:return 73
break;
case 16:return 64
break;
case 17:return 76
break;
case 18:return 77
break;
case 19:return 80
break;
case 20:return 57
break;
case 21:return 31
break;
case 22:return 34
break;
case 23:return 38
break;
case 24:return 27
break;
case 25:return 50
break;
case 26:return 51
break;
case 27:return 43
break;
case 28:return 44
break;
case 29:return 24
break;
case 30:return 42
break;
case 31:return 66
break;
case 32:return 45
break;
case 33:return 63
break;
case 34:return 36
break;
case 35:return 36
break;
case 36:return 36
break;
case 37:return 36
break;
case 38:return 83
break;
case 39:return 84
break;
case 40:return 36
break;
case 41:return 59
break;
case 42:return 'Tprint' 
break;
case 43:return 60  
break;
case 44:return 61 
break;
case 45:return 62
break;
case 46:return 52
break;
case 47:return 56
break;
case 48:return 58
break;
case 49:return 18
break;
case 50:return 29
break;
case 51:return 35
break;
case 52:return 30
break;
case 53:return 26
break;
case 54:return 82
break;
case 55: yy_.yytext=yy_.yytext.substr(1, yy_.yyleng-2); return 85 
break;
case 56: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 81; 
break;
case 57:return 5
break;
case 58: errores.push({tipo: "Lexico", error: yy_.yytext, linea: yy_.yylloc.first_line, columna: yy_.yylloc.first_column+1}); return 'INVALID'; 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:;)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:pow\b)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:%)/i,/^(?:>)/i,/^(?:<)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:,)/i,/^(?:=)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:execute\b)/i,/^(?:for\b)/i,/^(?:endl\b)/i,/^(?:new\b)/i,/^(?:cout\b)/i,/^(?:bool\b)/i,/^(?:int\b)/i,/^(?:std::string\b)/i,/^(?:char\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:double\b)/i,/^(?:if\b)/i,/^(?:print\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:([a-zA-Z])([a-zA-Z0-9])*)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[']\\\\[']|[']\\"[']|[']\\'[']|[']\\n[']|[']\\t[']|[']\\r[']|['].?['])/i,/^(?:"[^\"]*")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"charLiteral":{"rules":[],"inclusive":false},"string":{"rules":[],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}